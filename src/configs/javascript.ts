import type { FlatESLintConfig, Rules } from 'eslint-define-config'
import globals from 'globals'
import { pluginStylisticJS, pluginStylisticPlus } from '../plugins'

const stylisticRules: Partial<Rules> = {
  '@stylistic/js/arrow-parens': ['error', 'as-needed'],
  '@stylistic/js/arrow-spacing': ['error', { after: true, before: true }],
  '@stylistic/js/block-spacing': ['error', 'always'],
  '@stylistic/js/brace-style': ['error', '1tbs', { allowSingleLine: true }],
  '@stylistic/js/comma-dangle': ['error', 'always-multiline'],
  '@stylistic/js/comma-spacing': ['error', { before: false, after: true }],
  '@stylistic/js/comma-style': ['error', 'last'],
  '@stylistic/js/computed-property-spacing': ['error', 'never', { enforceForClassMembers: true }],
  '@stylistic/js/dot-location': ['error', 'property'],
  '@stylistic/js/eol-last': 'error',
  '@stylistic/js/func-call-spacing': ['error', 'never'],
  '@stylistic/js/implicit-arrow-linebreak': 'error',
  '@stylistic/js/indent': [
    'error',
    2,
    {
      SwitchCase: 1,
      MemberExpression: 0,
      FunctionDeclaration: {
        parameters: 1,
        body: 1,
      },
      FunctionExpression: {
        parameters: 1,
        body: 1,
      },
    },
  ],
  '@stylistic/js/key-spacing': ['error', { beforeColon: false, afterColon: true }],
  '@stylistic/js/keyword-spacing': ['error', { before: true, after: true }],
  '@stylistic/js/multiline-ternary': ['error', 'always-multiline'],
  '@stylistic/js/new-parens': ['error', 'always'],
  '@stylistic/js/no-extra-parens': ['error', 'functions'],
  '@stylistic/js/no-mixed-operators': [
    'error',
    {
      groups: [
        ['==', '!=', '===', '!==', '>', '>=', '<', '<='],
        ['&&', '||'],
        ['in', 'instanceof'],
      ],
      allowSamePrecedence: true,
    },
  ],
  '@stylistic/js/no-multi-spaces': 'error',
  '@stylistic/js/no-multiple-empty-lines': ['error', { max: 1, maxBOF: 0, maxEOF: 1 }],
  '@stylistic/js/no-tabs': 'error',
  '@stylistic/js/no-trailing-spaces': 'error',
  '@stylistic/js/no-whitespace-before-property': 'error',
  '@stylistic/js/object-curly-newline': ['error', { multiline: true, consistent: true }],
  '@stylistic/js/object-curly-spacing': ['error', 'always'],
  '@stylistic/js/object-property-newline': ['error', { allowMultiplePropertiesPerLine: true }],
  '@stylistic/js/padded-blocks': ['error', { blocks: 'never', switches: 'never', classes: 'never' }],
  '@stylistic/js/quotes': ['error', 'single', { avoidEscape: true, allowTemplateLiterals: true }],
  '@stylistic/js/semi': ['error', 'never'],
  '@stylistic/js/semi-spacing': ['error', { before: false, after: true }],
  '@stylistic/js/space-before-blocks': ['error', 'always'],
  '@stylistic/js/space-before-function-paren': [
    'error',
    {
      anonymous: 'always',
      named: 'never',
      asyncArrow: 'always',
    },
  ],
  '@stylistic/js/space-in-parens': ['error', 'never'],
  '@stylistic/js/space-infix-ops': 'error',
  '@stylistic/js/space-unary-ops': ['error', { words: true, nonwords: false }],
  '@stylistic/js/spaced-comment': [
    'error',
    'always',
    {
      line: { markers: ['*package', '!', '/', ',', '='] },
      block: { balanced: true, markers: ['*package', '!', ',', ':', '::', 'flow-include'], exceptions: ['*'] },
    },
  ],
  '@stylistic/js/switch-colon-spacing': 'error',
  '@stylistic/js/template-curly-spacing': ['error', 'never'],
  '@stylistic/js/template-tag-spacing': ['error', 'never'],
  '@stylistic/js/wrap-iife': ['error', 'any', { functionPrototypeMethods: true }],
  '@stylistic/js/yield-star-spacing': ['error', 'both'],
  '@stylistic/plus/indent-binary-ops': ['error', 2],
}

export const javascript: FlatESLintConfig[] = [{
  languageOptions: {
    ecmaVersion: 'latest',
    globals: {
      ...globals.browser,
      ...globals.es2021,
      ...globals.node,
    },
    parserOptions: {
      ecmaFeatures: {
        jsx: true,
      },
      ecmaVersion: 'latest',
      sourceType: 'module',
    },
    sourceType: 'module',
  },
  plugins: {
    '@stylistic/js': pluginStylisticJS,
    '@stylistic/plus': pluginStylisticPlus,
  },
  rules: {
    'accessor-pairs': ['error', { enforceForClassMembers: true, setWithoutGet: true }],
    'array-callback-return': ['error', { allowImplicit: true }],
    'arrow-body-style': ['error', 'as-needed'],
    'block-scoped-var': 'error',
    'constructor-super': 'error',
    'curly': ['error', 'all'],
    'default-case': 'error',
    'default-case-last': 'error',
    'dot-notation': ['error', { allowKeywords: true }],
    'eqeqeq': ['error', 'always', { null: 'ignore' }],
    'for-direction': 'error',
    'getter-return': 'error',
    'new-cap': ['error', { capIsNew: false, newIsCap: true, properties: true }],
    'no-alert': 'error',
    'no-array-constructor': 'error',
    'no-async-promise-executor': 'error',
    'no-await-in-loop': 'error',
    'no-caller': 'error',
    'no-case-declarations': 'error',
    'no-class-assign': 'error',
    'no-compare-neg-zero': 'error',
    'no-cond-assign': 'error',
    'no-console': ['error', { allow: ['warn', 'error'] }],
    'no-constant-binary-expression': 'error',
    'no-const-assign': 'error',
    'no-constant-condition': 'error',
    'no-constructor-return': 'error',
    'no-control-regex': 'error',
    'no-debugger': 'error',
    'no-delete-var': 'error',
    'no-dupe-args': 'error',
    'no-dupe-class-members': 'error',
    'no-dupe-else-if': 'error',
    'no-dupe-keys': 'error',
    'no-duplicate-case': 'error',
    'no-duplicate-imports': 'error',
    'no-else-return': 'error',
    'no-empty': ['error', { allowEmptyCatch: true }],
    'no-empty-character-class': 'error',
    'no-empty-function': 'error',
    'no-empty-pattern': 'error',
    'no-eval': 'error',
    'no-ex-assign': 'error',
    'no-extend-native': 'error',
    'no-extra-bind': 'error',
    'no-extra-boolean-cast': 'error',
    'no-fallthrough': 'error',
    'no-func-assign': 'error',
    'no-global-assign': 'error',
    'no-implied-eval': 'error',
    'no-inner-declarations': 'error',
    'no-invalid-regexp': 'error',
    'no-irregular-whitespace': 'error',
    'no-iterator': 'error',
    'no-labels': ['error', { allowLoop: false, allowSwitch: false }],
    'no-lone-blocks': 'error',
    'no-lonely-if': 'error',
    'no-loss-of-precision': 'off',
    'no-misleading-character-class': 'error',

    'no-multi-str': 'error',
    'no-new': 'error',
    'no-new-func': 'error',
    'no-new-object': 'error',
    'no-new-symbol': 'error',
    'no-new-wrappers': 'error',
    'no-nonoctal-decimal-escape': 'error',
    'no-obj-calls': 'error',
    'no-octal': 'error',
    'no-octal-escape': 'error',
    'no-proto': 'error',
    'no-prototype-builtins': 'error',
    'no-redeclare': ['error', { builtinGlobals: true }],
    'no-regex-spaces': 'error',
    'no-return-assign': ['error', 'except-parens'],
    'no-self-assign': 'error',
    'no-self-compare': 'error',
    'no-sequences': 'error',
    'no-setter-return': 'error',
    'no-shadow-restricted-names': 'error',
    'no-sparse-arrays': 'error',
    'no-template-curly-in-string': 'error',
    'no-this-before-super': 'error',
    'no-throw-literal': 'error',
    'no-undef': 'error',
    'no-undef-init': 'error',
    'no-unexpected-multiline': 'error',
    'no-unmodified-loop-condition': 'error',
    'no-unneeded-ternary': ['error', { defaultAssignment: false }],
    'no-unreachable': 'error',
    'no-unreachable-loop': 'error',
    'no-unsafe-finally': 'error',
    'no-unsafe-negation': 'error',
    'no-unused-expressions': [
      'error',
      {
        allowShortCircuit: true,
        allowTernary: true,
        allowTaggedTemplates: true,
      },
    ],
    'no-use-before-define': ['error', { classes: false, functions: false, variables: false }],
    'no-useless-backreference': 'error',
    'no-useless-call': 'error',
    'no-useless-catch': 'error',
    'no-useless-computed-key': 'error',
    'no-useless-concat': 'error',
    'no-useless-constructor': 'error',
    'no-useless-escape': 'error',
    'no-useless-rename': 'error',
    'no-useless-return': 'error',
    'no-var': 'error',
    'no-void': 'error',
    'no-with': 'error',
    'object-shorthand': ['error', 'always', { avoidQuotes: true, ignoreConstructors: false }],
    'one-var': ['error', { initialized: 'never' }],
    'prefer-arrow-callback': ['error', { allowNamedFunctions: true, allowUnboundThis: false }],
    'prefer-const': ['error', { destructuring: 'any', ignoreReadBeforeAssign: true }],
    'prefer-exponentiation-operator': 'error',
    'prefer-promise-reject-errors': 'error',
    'prefer-regex-literals': ['error', { disallowRedundantWrapping: true }],
    'prefer-rest-params': 'error',
    'prefer-spread': 'error',
    'prefer-template': 'error',
    'require-await': 'error',
    'require-yield': 'error',
    'rest-spread-spacing': ['error', 'never'],
    'sort-imports': [
      'error',
      {
        allowSeparatedGroups: false,
        ignoreCase: false,
        ignoreDeclarationSort: true,
        ignoreMemberSort: false,
        memberSyntaxSortOrder: ['none', 'all', 'multiple', 'single'],
      },
    ],
    'symbol-description': 'error',
    'unicode-bom': ['error', 'never'],
    'use-isnan': [
      'error',
      {
        enforceForSwitchCase: true,
        enforceForIndexOf: true,
      },
    ],
    'valid-typeof': ['error', { requireStringLiterals: true }],
    'yoda': ['error', 'never'],
    ...stylisticRules,
  },
}]
